# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ "main" ]

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    
    - name: Format
      run: |
        go fmt ./...
        if [ -n "$(git status --porcelain)" ]; then
          echo "Code is not formatted. Please run 'go fmt ./...' and commit the changes."
          exit 1
        fi
    
    - name: Vet
      run: go vet ./...
    
    - name: Run tests
      run: go test -v ./...

  build:
    needs: lint-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
    
    - name: Build for Windows
      run: GOOS=windows GOARCH=amd64 go build -o mwc.exe main.go
    
    - name: Build for macOS
      run: GOOS=darwin GOARCH=amd64 go build -o mwc-mac main.go
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: |
          mwc.exe
          mwc-mac

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: binaries
    
    - name: Get the version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
    
    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./mwc.exe
        asset_name: mwc.exe
        asset_content_type: application/octet-stream
        body: "Windows binary for mwc"
    
    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./mwc
        asset_name: mwc
        asset_content_type: application/octet-stream
        body: "macOS binary for mwc"
